// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_convert_time
int rcpp_convert_time(const std::string& hms);
RcppExport SEXP _gtfsrouter_rcpp_convert_time(SEXP hmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type hms(hmsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_convert_time(hms));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_time_to_seconds
Rcpp::IntegerVector rcpp_time_to_seconds(std::vector <std::string> times);
RcppExport SEXP _gtfsrouter_rcpp_time_to_seconds(SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector <std::string> >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_time_to_seconds(times));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_csa_isochrone
Rcpp::IntegerVector rcpp_csa_isochrone(Rcpp::DataFrame timetable, Rcpp::DataFrame transfers, const size_t nstations, const size_t ntrips, const std::vector <size_t> start_stations, const int start_time, const int end_time);
RcppExport SEXP _gtfsrouter_rcpp_csa_isochrone(SEXP timetableSEXP, SEXP transfersSEXP, SEXP nstationsSEXP, SEXP ntripsSEXP, SEXP start_stationsSEXP, SEXP start_timeSEXP, SEXP end_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type timetable(timetableSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type transfers(transfersSEXP);
    Rcpp::traits::input_parameter< const size_t >::type nstations(nstationsSEXP);
    Rcpp::traits::input_parameter< const size_t >::type ntrips(ntripsSEXP);
    Rcpp::traits::input_parameter< const std::vector <size_t> >::type start_stations(start_stationsSEXP);
    Rcpp::traits::input_parameter< const int >::type start_time(start_timeSEXP);
    Rcpp::traits::input_parameter< const int >::type end_time(end_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_csa_isochrone(timetable, transfers, nstations, ntrips, start_stations, start_time, end_time));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_make_timetable
Rcpp::List rcpp_make_timetable(Rcpp::DataFrame stop_times);
RcppExport SEXP _gtfsrouter_rcpp_make_timetable(SEXP stop_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type stop_times(stop_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_make_timetable(stop_times));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_csa
Rcpp::DataFrame rcpp_csa(Rcpp::DataFrame timetable, Rcpp::DataFrame transfers, const size_t nstations, const size_t ntrips, const std::vector <size_t> start_stations, const std::vector <size_t> end_stations, const int start_time);
RcppExport SEXP _gtfsrouter_rcpp_csa(SEXP timetableSEXP, SEXP transfersSEXP, SEXP nstationsSEXP, SEXP ntripsSEXP, SEXP start_stationsSEXP, SEXP end_stationsSEXP, SEXP start_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type timetable(timetableSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type transfers(transfersSEXP);
    Rcpp::traits::input_parameter< const size_t >::type nstations(nstationsSEXP);
    Rcpp::traits::input_parameter< const size_t >::type ntrips(ntripsSEXP);
    Rcpp::traits::input_parameter< const std::vector <size_t> >::type start_stations(start_stationsSEXP);
    Rcpp::traits::input_parameter< const std::vector <size_t> >::type end_stations(end_stationsSEXP);
    Rcpp::traits::input_parameter< const int >::type start_time(start_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_csa(timetable, transfers, nstations, ntrips, start_stations, end_stations, start_time));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gtfsrouter_rcpp_convert_time", (DL_FUNC) &_gtfsrouter_rcpp_convert_time, 1},
    {"_gtfsrouter_rcpp_time_to_seconds", (DL_FUNC) &_gtfsrouter_rcpp_time_to_seconds, 1},
    {"_gtfsrouter_rcpp_csa_isochrone", (DL_FUNC) &_gtfsrouter_rcpp_csa_isochrone, 7},
    {"_gtfsrouter_rcpp_make_timetable", (DL_FUNC) &_gtfsrouter_rcpp_make_timetable, 1},
    {"_gtfsrouter_rcpp_csa", (DL_FUNC) &_gtfsrouter_rcpp_csa, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_gtfsrouter(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
